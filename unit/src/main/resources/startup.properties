#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

*.domain=debug

######### Implementation classes #########
## DONT MODIFY UNLESS SURE ABOUT CHANGE ##

*.workflow.engine.impl=org.apache.falcon.workflow.engine.OozieWorkflowEngine
*.oozie.process.workflow.builder=org.apache.falcon.workflow.OozieProcessWorkflowBuilder
*.oozie.feed.workflow.builder=org.apache.falcon.workflow.OozieFeedWorkflowBuilder
*.SchedulableEntityManager.impl=org.apache.falcon.resource.SchedulableEntityManager
*.ConfigSyncService.impl=org.apache.falcon.resource.ConfigSyncService
*.ProcessInstanceManager.impl=org.apache.falcon.resource.InstanceManager
*.catalog.service.impl=org.apache.falcon.catalog.HiveCatalogService

##### Falcon Services #####
*.application.services=org.apache.falcon.security.AuthenticationInitializationService,\
                        org.apache.falcon.workflow.WorkflowJobEndNotificationService,\
                        org.apache.falcon.service.FalconJPAService,\
                        org.apache.falcon.extensions.ExtensionService,\
                        org.apache.falcon.entity.store.ConfigurationStore

##### Falcon Configuration Store Change listeners #####
*.configstore.listeners=org.apache.falcon.entity.v0.EntityGraph,\
                        org.apache.falcon.entity.ColoClusterRelation,\
                        org.apache.falcon.group.FeedGroupMap,\
                        org.apache.falcon.entity.store.FeedLocationStore

##### JMS MQ Broker Implementation class #####
*.broker.impl.class=org.apache.activemq.ActiveMQConnectionFactory


######### System startup parameters #########

# Location to store user entity configurations
debug.config.store.uri=file://${user.dir}/target/store
debug.config.store.persist=false
debug.config.oozie.conf.uri=${user.dir}/target/oozie
debug.system.lib.location=${system.lib.location}
debug.broker.url=vm://localhost
debug.retry.recorder.path=${user.dir}/target/retry
debug.libext.feed.retention.paths=${falcon.libext}
debug.libext.feed.replication.paths=${falcon.libext}
debug.libext.process.paths=${falcon.libext}

*.falcon.cleanup.service.frequency=minutes(5)

*.extension.store.uri=file://${user.dir}/target/extensions

######### Properties for configuring JMS provider - activemq #########
# Default Active MQ url
*.broker.url=tcp://localhost:61616

# default time-to-live for a JMS message 3 days (time in minutes)
*.broker.ttlInMins=4320
*.entity.topic=FALCON.ENTITY.TOPIC
*.max.retry.failure.count=1
*.retry.recorder.path=${user.dir}/logs/retry

######### Properties for configuring iMon client and metric #########
*.internal.queue.size=1000


##### List of shared libraries for Falcon workflows #####
*.shared.libs=activemq-all,ant,geronimo-j2ee-management,jms,json-simple,oozie-client,spring-jms,commons-lang3,commons-el

######### Authentication Properties #########

# Authentication type must be specified: simple|kerberos
*.falcon.authentication.type=simple

##### Service Configuration

# Indicates the Kerberos principal to be used in Falcon Service.
*.falcon.service.authentication.kerberos.principal=

# Location of the keytab file with the credentials for the Service principal.
*.falcon.service.authentication.kerberos.keytab=

# name node principal to talk to config store
*.dfs.namenode.kerberos.principal=

##### SPNEGO Configuration

# Authentication type must be specified: simple|kerberos|<class>
# org.apache.falcon.security.RemoteUserInHeaderBasedAuthenticationHandler can be used for backwards compatibility
*.falcon.http.authentication.type=simple

# Indicates how long (in seconds) an authentication token is valid before it has to be renewed.
*.falcon.http.authentication.token.validity=36000

# The signature secret for signing the authentication tokens.
*.falcon.http.authentication.signature.secret=falcon

# The domain to use for the HTTP cookie that stores the authentication token.
*.falcon.http.authentication.cookie.domain=

# Indicates if anonymous requests are allowed when using 'simple' authentication.
*.falcon.http.authentication.simple.anonymous.allowed=false

# Indicates the Kerberos principal to be used for HTTP endpoint.
# The principal MUST start with 'HTTP/' as per Kerberos HTTP SPNEGO specification.
*.falcon.http.authentication.kerberos.principal=

# Location of the keytab file with the credentials for the HTTP principal.
*.falcon.http.authentication.kerberos.keytab=

# The kerberos names rules is to resolve kerberos principal names, refer to Hadoop's KerberosName for more details.
*.falcon.http.authentication.kerberos.name.rules=DEFAULT

# Comma separated list of black listed users
*.falcon.http.authentication.blacklisted.users=

######### StateStore Properties #####
#*.falcon.state.store.impl=org.apache.falcon.state.store.jdbc.JDBCStateStore
#*.falcon.statestore.jdbc.driver=org.apache.derby.jdbc.EmbeddedDriver
#*.falcon.statestore.jdbc.url=jdbc:derby:data/statestore.db;create=true
#*.falcon.statestore.jdbc.username=sa
#*.falcon.statestore.jdbc.password=
#*.falcon.statestore.connection.data.source=org.apache.commons.dbcp.BasicDataSource
## Maximum number of active connections that can be allocated from this pool at the same time.
#*.falcon.statestore.pool.max.active.conn=10
#*.falcon.statestore.connection.properties=
## Indicates the interval (in milliseconds) between eviction runs.
#*.falcon.statestore.validate.db.connection.eviction.interval=300000
## The number of objects to examine during each run of the idle object evictor thread.
#*.falcon.statestore.validate.db.connection.eviction.num=10
## Creates Falcon DB.
## If set to true, it creates the DB schema if it does not exist. If the DB schema exists is a NOP.
## If set to false, it does not create the DB schema. If the DB schema does not exist it fails start up.
#*.falcon.statestore.create.db.schema=true
