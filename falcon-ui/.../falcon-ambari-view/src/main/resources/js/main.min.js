/**** Apache Falcon UI ***/
!function() {
    "use strict";
    var a = angular.module("app.controllers.cluster", [ "app.services" ]);
    a.controller("ClusterFormCtrl", [ "$scope", "$interval", "Falcon", "EntityModel", "$state", "X2jsService", function(a, b, c, d, e, f) {
        function g() {
            var b = [ "readonly", "write", "execute", "workflow", "messaging", "registry" ], c = [ "staging", "temp", "working", "" ], d = a.clusterEntity.clusterModel.cluster.interfaces["interface"], e = a.clusterEntity.clusterModel.cluster.locations.location;
            d.forEach(function(a) {
                b.forEach(function(c) {
                    a._type === c && b.splice(c, 1);
                });
            }), a.registry = {
                check: !0
            }, b.forEach(function(b) {
                var c = {
                    _type: b,
                    _endpoint: "",
                    _version: ""
                };
                "registry" === b && (a.registry = {
                    check: !1
                }), d.push(c);
            }), "" === a.clusterEntity.clusterModel.cluster.tags || void 0 === a.clusterEntity.clusterModel.cluster.tags ? (a.clusterEntity.clusterModel.cluster.tags = "", 
            a.tagsArray = [ {
                key: null,
                value: null
            } ]) : a.splitTags(), a.clusterEntity.clusterModel.cluster.ACL || (a.clusterEntity.clusterModel.cluster.ACL = {
                _owner: "",
                _group: "",
                _permission: ""
            }), e.forEach(function(a) {
                c.forEach(function(b) {
                    a._name === b && c.splice(b, 1);
                });
            }), c.forEach(function(a) {
                var b = {
                    _name: a,
                    _path: ""
                };
                e.push(b);
            }), a.clusterEntity.clusterModel.cluster.properties || (a.clusterEntity.clusterModel.cluster.properties = {
                property: [ {
                    _name: "",
                    _value: ""
                } ]
            });
        }
        function h() {
            a.registry.check || a.clusterEntity.clusterModel.cluster.interfaces["interface"].forEach(function(b, c) {
                "registry" === b._type && (a.backupRegistryObject = a.clusterEntity.clusterModel.cluster.interfaces["interface"][c], 
                a.clusterEntity.clusterModel.cluster.interfaces["interface"].splice(c, 1));
            });
            var b = a.clusterEntity.clusterModel.cluster.properties.property.length - 1;
            ("" === a.clusterEntity.clusterModel.cluster.properties.property[b]._name || void 0 === a.clusterEntity.clusterModel.cluster.properties.property[b]._name || "" === a.clusterEntity.clusterModel.cluster.properties.property[b]._value || void 0 === a.clusterEntity.clusterModel.cluster.properties.property[b]._value) && a.removeProperty(b), 
            0 === a.clusterEntity.clusterModel.cluster.properties.property.length && delete a.clusterEntity.clusterModel.cluster.properties;
            var c = a.clusterEntity.clusterModel.cluster.locations.location.length - 1;
            ("" === a.clusterEntity.clusterModel.cluster.locations.location[c]._name || void 0 === a.clusterEntity.clusterModel.cluster.locations.location[c]._name || "" === a.clusterEntity.clusterModel.cluster.locations.location[c]._path || void 0 === a.clusterEntity.clusterModel.cluster.locations.location[c]._path) && a.removeLocation(c), 
            a.clusterEntity.clusterModel.cluster.ACL && "" === a.clusterEntity.clusterModel.cluster.ACL._owner && delete a.clusterEntity.clusterModel.cluster.ACL, 
            0 === a.clusterEntity.clusterModel.cluster.tags.length && delete a.clusterEntity.clusterModel.cluster.tags, 
            a.arrangeFieldsOrder();
        }
        function i() {
            "forms.cluster.general" !== e.current.name && "forms.cluster.summary" !== e.current.name && b.cancel(j), 
            a.xmlPreview.edit ? (a.splitTags(), a.transformBack()) : (void 0 !== a.clusterEntity.clusterModel.cluster.tags && a.convertTags(), 
            a.showInPreview());
        }
        a.clusterEntity = d, a.xmlPreview = {
            edit: !1
        }, a.secondStep = !1, a.nameValid = !1, a.arrangeFieldsOrder = function() {
            var b = a.clusterEntity.clusterModel.cluster, c = {};
            c._xmlns = "uri:falcon:cluster:0.1", c._name = b._name, c._description = b._description, 
            c._colo = b._colo, b.tags && (c.tags = b.tags), b.interfaces && (c.interfaces = b.interfaces), 
            b.locations && (c.locations = b.locations), b.ACL && (c.ACL = b.ACL), b.properties && (c.properties = b.properties), 
            delete a.clusterEntity.clusterModel.cluster, a.clusterEntity.clusterModel.cluster = c;
        }, a.convertTags = function() {
            var b = [];
            a.tagsArray.forEach(function(a) {
                a.key && a.value && b.push(a.key + "=" + a.value);
            }), b = b.join(","), a.clusterEntity.clusterModel.cluster.tags = b;
        }, a.splitTags = function() {
            a.tagsArray = [], a.clusterEntity.clusterModel.cluster.tags.split(",").forEach(function(b) {
                var c = b.split("=");
                a.tagsArray.push({
                    key: c[0],
                    value: c[1]
                });
            });
        }, a.addTag = function() {
            a.tagsArray.push({
                key: null,
                value: null
            });
        }, a.removeTag = function(b) {
            isNaN(b) || void 0 === b || null === b || (a.tagsArray.splice(b, 1), a.convertTags());
        }, a.addLocation = function() {
            var b = a.clusterEntity.clusterModel.cluster.locations.location.length - 1;
            a.clusterEntity.clusterModel.cluster.locations.location[b]._name && a.clusterEntity.clusterModel.cluster.locations.location[b]._path && a.clusterEntity.clusterModel.cluster.locations.location.push({
                _name: "",
                _path: ""
            });
        }, a.removeLocation = function(b) {
            isNaN(b) || void 0 === b || null === b || a.clusterEntity.clusterModel.cluster.locations.location.splice(b, 1);
        }, a.addProperty = function() {
            var b = a.clusterEntity.clusterModel.cluster.properties.property.length - 1;
            a.clusterEntity.clusterModel.cluster.properties.property[b]._name && a.clusterEntity.clusterModel.cluster.properties.property[b]._value && a.clusterEntity.clusterModel.cluster.properties.property.push({
                _name: "",
                _value: ""
            });
        }, a.removeProperty = function(b) {
            null !== b && a.clusterEntity.clusterModel.cluster.properties.property[b] && a.clusterEntity.clusterModel.cluster.properties.property.splice(b, 1);
        }, a.goSummaryStep = function() {
            h(), a.secondStep = !0;
        }, a.goGeneralStep = function() {
            a.secondStep = !1, a.nameValid = !0, a.registry.check || a.clusterEntity.clusterModel.cluster.interfaces["interface"].push(a.backupRegistryObject), 
            a.clusterEntity.clusterModel.cluster.tags || (a.clusterEntity.clusterModel.cluster.tags = ""), 
            a.clusterEntity.clusterModel.cluster.properties || (a.clusterEntity.clusterModel.cluster.properties = {
                property: [ {
                    _name: "",
                    _value: ""
                } ]
            });
            var b = a.clusterEntity.clusterModel.cluster.locations.location.length - 1;
            "" !== a.clusterEntity.clusterModel.cluster.locations.location[b]._name && a.addLocation();
        }, a.saveCluster = function() {
            a.saveModelBuffer(), c.logRequest(), c.postSubmitEntity(a.jsonString, "cluster").success(function(a) {
                c.logResponse("success", a, !1), e.go("main");
            }).error(function(a) {
                c.logResponse("error", a, !1);
            });
        }, a.xmlPreview.editXML = function() {
            a.xmlPreview.edit = !a.xmlPreview.edit;
        }, a.showInPreview = function() {
            var b = f.json2xml_str(angular.copy(a.clusterEntity.clusterModel));
            a.prettyXml = f.prettifyXml(b), a.xml = b;
        }, a.transformBack = function() {
            try {
                var b = f.xml_str2json(a.prettyXml);
                a.clusterEntity.clusterModel = b, a.clusterEntity.clusterModel.cluster.properties && "" === a.clusterEntity.clusterModel.cluster.properties.property[0] && (a.clusterEntity.clusterModel.cluster.properties.property = []);
            } catch (c) {
                console.log("xml malformed");
            }
        }, a.saveModelBuffer = function() {
            a.jsonString = angular.toJson(a.clusterEntity.clusterModel), a.jsonString = JSON.parse(a.jsonString), 
            a.jsonString = f.json2xml_str(a.jsonString);
        };
        var j = b(i, 1e3);
        g();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.entity", [ "app.services" ]);
    a.controller("EntityRootCtrl", [ "$scope", function(a) {
        a.baseInit = function() {
            a.editXmlDisabled = !0;
        }, a.toggleEditXml = function() {
            a.editXmlDisabled = !a.editXmlDisabled;
        }, a.capitalize = function(a) {
            return a.charAt(0).toUpperCase() + a.slice(1);
        }, a.cancel = function() {
            var b = a.entityType;
            a[b] = null;
        };
    } ]);
}(), function() {
    "use strict";
    angular.module("app.controllers.feed", [ "app.controllers.entity", "app.services" ]);
}(), function() {
    "use strict";
    angular.module("app.controllers.process", [ "app.services", "app.controllers.entity" ]);
}(), function() {
    "use strict";
    angular.module("app.controllers", [ "app.controllers.login", "app.controllers.navHeader", "app.controllers.rootCtrl", "app.controllers.dashboardCtrl", "app.controllers.cluster", "app.controllers.feed", "app.controllers.process", "app.controllers.entity" ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.dashboardCtrl", [ "app.services" ]);
    a.controller("DashboardCtrl", [ "$scope", "Falcon", "EntityModel", "FileApi", "$state", "X2jsService", "$window", function(a, b, c, d, e, f, g) {
        a.$parent.refreshLists(), a.deleteEntity = function(c, d) {
            c = c.toLowerCase(), b.logRequest(), b.deleteEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(c);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.cloneEntity = function(d, g) {
            d = d.toLowerCase(), b.logRequest(), b.getEntityDefinition(d, g).success(function(g) {
                b.logResponse("success", g, !1, !0);
                var h = d + "Model", i = f.xml_str2json(g);
                c[h] = i, c[h][d]._name = "", a.models[h] = angular.copy(i), a.cloningMode = !0, 
                a.$parent.cloningMode = !0, e.go("forms." + d + ".general");
            }).error(function(a) {
                b.logResponse("error", a, !1, !0);
            });
        }, a.editEntity = function(d, g) {
            d = d.toLowerCase(), b.logRequest(), b.getEntityDefinition(d, g).success(function(g) {
                b.logResponse("success", g, !1, !0);
                var h = f.xml_str2json(g), i = d + "Model";
                c[i] = h, a.models[i] = angular.copy(h), a.editingMode = !0, a.$parent.cloningMode = !1, 
                e.go("forms." + d + ".general");
            }).error(function(a) {
                b.logResponse("error", a, !1, !0);
            });
        }, a.entityDetails = function(a, b) {
            b = b.toLowerCase(), g.location.href = "/entity.html?type=" + b + "&id=" + a + "&user.name=ambari-qa";
        }, a.resumeEntity = function(c, d) {
            b.logRequest(), b.postResumeEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(c);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.scheduleEntity = function(c, d) {
            b.logRequest(), b.postScheduleEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(c);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.suspendEntity = function(c, d) {
            b.logRequest(), b.postSuspendEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(c);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.relationsEntity = function(a, b) {
            console.log("relations " + a + " - " + b);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedClustersController", [ "$scope", "clustersList", "EntityFactory", function(a, b, c) {
        function d(b) {
            a.clusterList = [];
            var c = Object.prototype.toString.call(b.entity);
            "[object Array]" === c ? a.clusterList = b.entity : "[object Object]" === c && (a.clusterList = [ b.entity ]);
        }
        d(b), a.updateRetention = function() {
            "archive" === a.selectedCluster.retention.action && "source" === a.selectedCluster.type && (a.allClusters.length = 0, 
            a.allClusters.concat(a.feed.clusters), a.feed.clusters.length = 0, a.feed.clusters.push(a.sourceCluster), 
            a.feed.clusters.push(a.archiveCluster), a.sourceCluster.selected = !1, a.archiveCluster.selected = !0, 
            a.archiveCluster.active = !0, a.selectedCluster = a.archiveCluster), "archive" !== a.selectedCluster.retention.action && "source" === a.selectedCluster.type && a.archiveCluster.active && (a.archiveCluster.selected = !1, 
            a.feed.clusters.length = 0, a.allClusters.length = 0, a.feed.clusters.push(a.sourceCluster), 
            a.sourceCluster.selected = !0, a.archiveCluster.active = !1);
        }, a.addCluster = function() {
            a.selectedCluster.selected = !1;
            var b = a.newCluster(!0);
            a.feed.clusters.push(b), a.selectedCluster = b;
        }, a.newCluster = function(a) {
            return c.newCluster("target", a);
        }, a.handleCluster = function(b, c) {
            b.selected ? a.removeCluster(c) : a.selectCluster(b);
        }, a.selectCluster = function(b) {
            a.selectedCluster.selected = !1, b.selected = !0, a.selectedCluster = b;
        }, a.removeCluster = function(b) {
            b >= 0 && a.feed.clusters.length > 1 && "source" !== a.feed.clusters[b].type && !a.archiveCluster.active && (a.feed.clusters.splice(b, 1), 
            a.selectCluster(a.sourceCluster));
        }, a.selectedCluster = a.selectedCluster || a.feed.clusters[0], a.sourceCluster = a.sourceCluster || a.feed.clusters[0], 
        a.archiveCluster = a.newCluster(!1), a.archiveCluster.active = !1, a.allClusters = [];
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedGeneralInformationController", [ "$scope", function(a) {
        a.nameValid = !1, a.addTag = function() {
            a.feed.tags.push({
                key: null,
                value: null
            });
        }, a.removeTag = function(b) {
            b >= 0 && a.feed.tags.length > 1 && a.feed.tags.splice(b, 1);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedLocationController", [ "$scope", function(a) {
        function b(a) {
            a.active = !a.active;
        }
        a.toggleStorage = function() {
            b(a.feed.storage.fileSystem), b(a.feed.storage.catalog);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedPropertiesController", [ "$scope", function(a) {
        a.addCustomProperty = function() {
            a.feed.customProperties.push({
                key: null,
                value: null
            });
        }, a.removeCustomProperty = function(b) {
            b >= 0 && a.feed.customProperties.length > 1 && a.feed.customProperties.splice(b, 1);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedController", [ "$scope", "$state", "$timeout", "Falcon", "X2jsService", "JsonTransformerFactory", "EntityFactory", "EntitySerializer", "$interval", "$controller", function(a, b, c, d, e, f, g, h, i, j) {
        a.entityType = "feed", j("EntityRootCtrl", {
            $scope: a
        }), a.loadOrCreateEntity = function() {
            var b = a.entityType, c = a.models[b + "Model"];
            return a.models[b + "Model"] = null, c ? h.preDeserialize(c, b) : g.newEntity(b);
        }, a.init = function() {
            a.baseInit();
            var b = a.entityType;
            a[b] = a.loadOrCreateEntity(), a.dateFormat = "dd-MMMM-yyyy";
        }, a.openDatePicker = function(a, b) {
            a.preventDefault(), a.stopPropagation(), b.opened = !0;
        }, a.init(), a.transform = function() {
            var b = a.entityType, c = h.serialize(a[b], a.entityType);
            return a.prettyXml = e.prettifyXml(c), a.xml = c, c;
        }, a.saveEntity = function() {
            var c = a.entityType;
            a.$parent.cloningMode ? (d.logRequest(), d.postSubmitEntity(a.xml, a.entityType).success(function(a) {
                d.logResponse("success", a, !1), b.go("main");
            }).error(function(a) {
                d.logResponse("error", a, !1);
            })) : (d.logRequest(), d.postUpdateEntity(a.xml, a.entityType, a[c].name).success(function(a) {
                d.logResponse("success", a, !1), b.go("main");
            }).error(function(a) {
                d.logResponse("error", a, !1);
            })), a.editingMode = !1, a.cloningMode = !1;
        }, a.isActive = function(a) {
            return a === b.$current.name;
        }, a.parseDate = function(a) {
            return a ? a.split("T")[0] : a;
        }, a.parseTime = function(a) {
            if (a) {
                var b = a.split("T")[1].split(":");
                return b = b[0] + ":" + b[1];
            }
            return "Not defined";
        }, a.appendVariable = function(a, b, c) {
            b[c] = b[c] ? b[c] + "-" + a : a, b.focused = !1;
        };
        var k = function() {
            var b = a.entityType;
            if (a.editXmlDisabled) try {
                a.transform();
            } catch (c) {
                console.log("error when transforming xml"), console.log(c);
            } else try {
                a[b] = h.deserialize(a.prettyXml, b);
            } catch (c) {
                console.log("user entered xml incorrect format"), console.log(c);
            }
        }, l = i(k, 1e3);
        a.$on("$destroy", function() {
            i.cancel(l);
        });
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedSummaryController", [ "$scope", "$filter", function(a, b) {
        a.transform && a.transform(), a.hasTags = function() {
            var c = b("filter")(a.feed.tags, {
                key: "!!"
            });
            return c.length > 0;
        }, a.optional = function(a, b) {
            return a ? b || a : "Not specified";
        };
    } ]);
}(), function() {
    "use strict";
    angular.module("app.controllers.navHeader", [ "app.services.entity.model", "ngCookies" ]).controller("HeaderController", [ "$rootScope", "$scope", "$cookieStore", "$state", "EntityModel", function(a, b, c, d, e) {
        b.resetCluster = function() {
            e.clusterModel = {
                cluster: {
                    tags: "",
                    interfaces: {
                        "interface": [ {
                            _type: "readonly",
                            _endpoint: "hftp://sandbox.hortonworks.com:50070",
                            _version: "2.2.0"
                        }, {
                            _type: "write",
                            _endpoint: "hdfs://sandbox.hortonworks.com:8020",
                            _version: "2.2.0"
                        }, {
                            _type: "execute",
                            _endpoint: "sandbox.hortonworks.com:8050",
                            _version: "2.2.0"
                        }, {
                            _type: "workflow",
                            _endpoint: "http://sandbox.hortonworks.com:11000/oozie/",
                            _version: "4.0.0"
                        }, {
                            _type: "messaging",
                            _endpoint: "tcp://sandbox.hortonworks.com:61616?daemon=true",
                            _version: "5.1.6"
                        } ]
                    },
                    locations: {
                        location: [ {
                            _name: "staging",
                            _path: ""
                        }, {
                            _name: "temp",
                            _path: ""
                        }, {
                            _name: "working",
                            _path: ""
                        } ]
                    },
                    ACL: {
                        _owner: "",
                        _group: "",
                        _permission: ""
                    },
                    properties: {
                        property: [ {
                            _name: "",
                            _value: ""
                        } ]
                    },
                    _xmlns: "uri:falcon:cluster:0.1",
                    _name: "",
                    _description: "",
                    _colo: ""
                }
            };
        }, b.resetProcess = function() {
            b.cloningMode = !0;
        }, b.resetFeed = function() {
            b.cloningMode = !0;
        }, b.userLogged = function() {
            return !0;
        }, b.logOut = function() {
            c.put("userToken", null), d.transitionTo("login");
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.login", [ "ngMessages", "app.services" ]);
    a.controller("LoginFormCtrl", [ "$scope", "$state", "$cookieStore", "$http", function(a, b, c, d) {
        a.loggUser = function(e) {
            e.password.$setValidity("login", !0), e.$valid && d.get("config/loginData.js").success(function(d) {
                var f = d.user, g = d.password;
                if (a.login.user === f && a.login.password === g) {
                    var h = {};
                    h.timeOutLimit = a.login.timeOut, h.user = a.login.user, h.timeOut = new Date().getTime(), 
                    c.put("userToken", h), b.go("main");
                } else console.log("Wrong credentialss"), e.password.$setValidity("login", !1);
            });
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessClustersCtrl", [ "$scope", "clustersList", "EntityFactory", function(a, b, c) {
        function d(b) {
            a.clusterList = [];
            var c = Object.prototype.toString.call(b.entity);
            "[object Array]" === c ? a.clusterList = b.entity : "[object Object]" === c && (a.clusterList = [ b.entity ]);
        }
        a.init = function() {
            a.dateFormat = "dd-MMMM-yyyy";
        }, a.openDatePicker = function(a, b) {
            a.preventDefault(), a.stopPropagation(), b.opened = !0;
        }, a.addCluster = function() {
            a.process.clusters.push(c.newCluster());
        }, a.removeCluster = function(b) {
            b >= 0 && a.process.clusters.length > 1 && a.process.clusters.splice(b, 1);
        }, d(b), a.init();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessGeneralInformationCtrl", [ "$scope", function(a) {
        var b = {
            oozie: [ "3.1.3-incubating", "3.2.0-incubating", "3.3.0", "3.3.1", "3.3.2", "4.0.0", "4.0.1" ],
            pig: [ "pig-0.10.0", "pig-0.10.1", "pig-0.11.0", "pig-0.11.1", "pig-0.12.0", "pig-0.12.1", "pig-0.13.0", "pig-0.8.0", "pig-0.8.1", " pig-0.9.0", " pig-0.9.1", "pig-0.9.2" ],
            hive: [ "hive-0.10.0", "hive-0.11.0", "hive-0.12.0", "hive-0.13.0", "hive-0.13.1", "hive-0.6.0", "hive-0.7.0", "hive-0.8.0", "hive-0.8.1", "hive-0.9.0" ]
        };
        a.nameValid = !1, a.init = function() {
            a.versions = [];
        }, a.addTag = function() {
            a.process.tags.push({
                key: null,
                value: null
            });
        }, a.removeTag = function(b) {
            b >= 0 && a.process.tags.length > 1 && a.process.tags.splice(b, 1);
        }, a.selectWorkflow = function() {
            if (a.process.workflow) {
                var c = a.process.workflow.engine;
                a.versions = b[c];
            }
        }, a.init(), a.selectWorkflow();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessInputsAndOutputsCtrl", [ "$scope", "EntityFactory", "feedsList", function(a, b, c) {
        function d(b) {
            a.feedsList = [];
            var c = Object.prototype.toString.call(b.entity);
            "[object Array]" === c ? a.feedsList = b.entity : "[object Object]" === c && (a.feedsList = [ b.entity ]);
        }
        a.init = function() {}, a.addInput = function() {
            a.process.inputs.push(b.newInput());
        }, a.removeInput = function(b) {
            b >= 0 && a.process.inputs.splice(b, 1);
        }, a.addOutput = function() {
            a.process.outputs.push(b.newOutput());
        }, a.removeOutput = function(b) {
            b >= 0 && a.process.outputs.splice(b, 1);
        }, d(c), a.init();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessPropertiesCtrl", [ "$scope", function() {} ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessRootCtrl", [ "$scope", "$state", "$interval", "$controller", "EntityFactory", "EntitySerializer", "X2jsService", function(a, b, c, d, e, f, g) {
        a.entityType = "process", d("EntityRootCtrl", {
            $scope: a
        }), a.init = function() {
            a.baseInit();
            var b = a.entityType;
            a[b] = a.loadOrCreateEntity();
        }, a.isActive = function(a) {
            return a === b.$current.name;
        }, a.loadOrCreateEntity = function() {
            var b = a.entityType, c = a.models[b + "Model"];
            return a.models[b + "Model"] = null, c ? f.preDeserialize(c, b) : e.newEntity(b);
        }, a.init(), a.transform = function() {
            var b = a.entityType, c = f.serialize(a[b], a.entityType);
            return a.prettyXml = g.prettifyXml(c), a.xml = c, c;
        };
        var h = function() {
            var b = a.entityType;
            if (a.editXmlDisabled) try {
                a.transform();
            } catch (c) {
                console.log("error when transforming xml"), console.log(c);
            } else try {
                a[b] = f.deserialize(a.prettyXml, b);
            } catch (c) {
                console.log("user entered xml incorrect format"), console.log(c);
            }
        }, i = c(h, 1e3);
        a.$on("$destroy", function() {
            c.cancel(i);
        });
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessSummaryCtrl", [ "$scope", "$state", "$timeout", "$filter", "Falcon", function(a, b, c, d, e) {
        a.init = function() {
            a.transform && a.transform();
        }, a.hasTags = function() {
            var b = d("filter")(a.process.tags, {
                key: "!!"
            });
            return b.length > 0;
        }, a.optional = function(a, b) {
            return a ? b || a : "Not specified";
        }, a.saveEntity = function() {
            var c = a.entityType;
            a.$parent.cloningMode ? (e.logRequest(), e.postSubmitEntity(a.xml, a.entityType).success(function(a) {
                e.logResponse("success", a, !1), b.go("main");
            }).error(function(a) {
                e.logResponse("error", a, !1);
            })) : (e.logRequest(), e.postUpdateEntity(a.xml, a.entityType, a[c].name).success(function(a) {
                e.logResponse("success", a, !1), b.go("main");
            }).error(function(a) {
                e.logResponse("error", a, !1);
            })), a.editingMode = !1, a.cloningMode = !1;
        }, a.init();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.rootCtrl", [ "app.services" ]);
    a.controller("RootCtrl", [ "$scope", "$timeout", "Falcon", "FileApi", "EntityModel", "$state", "X2jsService", "ValidationService", function(a, b, c, d, e, f, g, h) {
        a.server = c, a.validations = h.define(), a.models = {}, a.handleFile = function(b) {
            c.logRequest(), d.loadFile(b).then(function() {
                c.postSubmitEntity(d.fileRaw, e.type).success(function(b) {
                    c.logResponse("success", b, !1), a.refreshList(e.type);
                }).error(function(a) {
                    c.logResponse("error", a, !1);
                });
            });
        }, a.lists = {}, a.lists.feedList = [], a.lists.clusterList = [], a.lists.processList = [], 
        a.refreshList = function(b) {
            b = b.toLowerCase(), c.responses.listLoaded[b] = !1, c.responses.multiRequest[b] > 0 || (c.logRequest(), 
            c.getEntities(b).success(function(d) {
                var e = Object.prototype.toString.call(d.entity);
                c.logResponse("success", d, !1, !0), c.responses.listLoaded[b] = !0, a.lists[b + "List"] = [], 
                null === d ? a.lists[b + "List"] = [] : "[object Array]" === e ? a.lists[b + "List"] = d.entity : "[object Object]" === e ? a.lists[b + "List"][0] = d.entity : console.log("type of data not recognized");
            }).error(function(a) {
                c.logResponse("error", a);
            }));
        }, a.refreshLists = function() {
            a.refreshList("cluster"), a.refreshList("feed"), a.refreshList("process");
        }, a.closeAlert = function(a) {
            c.removeMessage(a);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives", [ "app.services", "app.directives.entities-list", "app.directives.server-messages", "app.directives.entity" ]);
    a.directive("navHeader", function() {
        return {
            replace: !1,
            restrict: "A",
            templateUrl: "html/directives/navDv.html",
            controller: "HeaderController"
        };
    }), a.directive("fileinputChange", function() {
        return {
            restrict: "A",
            link: function(a, b, c) {
                var d = b.scope()[c.fileinputChange];
                b.bind("change", d), b.bind("click", function() {
                    this.value = "";
                });
            }
        };
    }), a.factory("EncodeService", function() {
        return {
            encode: function(a) {
                return encodeURIComponent(a);
            }
        };
    }), a.directive("checkName", [ "Falcon", function(a) {
        return {
            replace: !1,
            scope: {
                checkName: "@",
                checkNameFlag: "=",
                check: "="
            },
            restrict: "A",
            link: function(b, c) {
                function d() {
                    var d = c[0].value;
                    a.getEntityDefinition(b.checkName, d).success(function() {
                        c.addClass("nameAlreadyRegistered"), c.parent().append('<label class="text-danger" id="nameWarning">Name ' + d + " already registered</label>"), 
                        b.checkNameFlag = !1;
                    }).error(function() {
                        c.removeClass("nameAlreadyRegistered"), b.checkNameFlag = !0;
                    });
                }
                function e() {
                    c.removeClass("nameAlreadyRegistered"), $("#nameWarning").remove();
                }
                b.check ? (c.bind("blur", d), c.bind("focus", e)) : b.checkNameFlag = !0;
            }
        };
    } ]), a.directive("frequency", function() {
        return {
            replace: !1,
            scope: {
                value: "=",
                prefix: "@"
            },
            restrict: "E",
            template: "{{output}}",
            link: function(a) {
                a.output = a.value.quantity ? a.prefix + " " + a.value.quantity + " " + a.value.unit : "Not specified";
            }
        };
    }), a.directive("timeZoneSelect", function() {
        return {
            restrict: "E",
            replace: !1,
            scope: {
                ngModel: "="
            },
            templateUrl: "html/directives/timeZoneSelectDv.html"
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.directives.entities-list", [ "app.services" ]);
    a.controller("EntitiesListCtrl", [ "$scope", "Falcon", "X2jsService", "$window", "EncodeService", function(a, b, c, d, e) {
        a.downloadEntity = function(a, c) {
            b.logRequest(), b.getEntityDefinition(a, c).success(function(a) {
                b.logResponse("success", a, !1, !0), d.location.href = "data:application/octet-stream," + e.encode(a);
            }).error(function(a) {
                b.logResponse("error", a, !1);
            });
        };
    } ]), a.filter("tagFilter", function() {
        return function(a) {
            var b, c = [];
            for (b = 0; b < a.length; b++) {
                var d = a[b];
                d.list && d.list.tag || (d.list = {
                    tag: [ "" ]
                }), c.push(d);
            }
            return c;
        };
    }), a.directive("entitiesList", [ "$timeout", "Falcon", function(a, b) {
        return {
            scope: {
                input: "=",
                schedule: "=",
                suspend: "=",
                clone: "=",
                remove: "=",
                edit: "=",
                type: "@",
                entityDetails: "=",
                resume: "=",
                refresh: "="
            },
            controller: "EntitiesListCtrl",
            restrict: "EA",
            templateUrl: "html/directives/entitiesListDv.html",
            link: function(c) {
                c.server = b, c.$watch("input", function() {
                    c.selectedRows = [], c.checkButtonsToShow();
                }, !0), c.selectedRows = [], c.simpleFilter = {}, c.selectedDisabledButtons = {
                    schedule: !0,
                    suspend: !0,
                    resume: !0
                }, c.checkButtonsToShow = function() {
                    var b = {
                        SUBMITTED: 0,
                        RUNNING: 0,
                        SUSPENDED: 0,
                        UNKNOWN: 0
                    };
                    a(function() {
                        c.selectedRows.forEach(function(a) {
                            b[a.status] = b[a.status] + 1;
                        }), b.SUBMITTED > 0 && (c.selectedDisabledButtons = b.RUNNING > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 ? {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : {
                            schedule: !1,
                            suspend: !0,
                            resume: !0
                        }), b.RUNNING > 0 && (c.selectedDisabledButtons = b.SUBMITTED > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 ? {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : {
                            schedule: !0,
                            suspend: !1,
                            resume: !0
                        }), b.SUSPENDED > 0 && (c.selectedDisabledButtons = b.SUBMITTED > 0 || b.RUNNING > 0 || b.UNKNOWN > 0 ? {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : {
                            schedule: !0,
                            suspend: !0,
                            resume: !1
                        }), b.UNKNOWN > 0 && (c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        }), 0 === c.selectedRows.length && (c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        });
                    }, 50);
                }, c.scopeEdit = function() {
                    c.edit(c.selectedRows[0].type, c.selectedRows[0].name);
                }, c.scopeClone = function() {
                    c.clone(c.selectedRows[0].type, c.selectedRows[0].name);
                }, c.goEntityDetails = function(a, b) {
                    c.entityDetails(a, b);
                }, c.scopeRemove = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.remove(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeSchedule = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.schedule(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeSuspend = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.suspend(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeResume = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.resume(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.download = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) c.downloadEntity(c.selectedRows[a].type, c.selectedRows[a].name);
                };
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.entity", []);
    a.directive("entitySummary", function() {
        return {
            restrict: "E",
            controller: "EntitySummaryCtrl",
            link: function(a) {
                a.calculateAmount(), a.$watch("entities", function() {
                    a.calculateAmount();
                }, !0);
            },
            scope: {
                entities: "=",
                type: "@"
            },
            templateUrl: "html/directives/entitySummaryDv.html"
        };
    }), a.controller("EntitySummaryCtrl", [ "$scope", function(a) {
        a.calculateAmount = function() {
            a.statusCount = {
                SUBMITTED: 0,
                RUNNING: 0,
                SUSPENDED: 0,
                UNKNOWN: 0,
                TOTAL_AMOUNT: a.entities.length || 0
            }, a.entities.length > 0 && a.entities.forEach(function(b) {
                void 0 !== b.status && (a.statusCount[b.status] || (a.statusCount[b.status] = 0), 
                a.statusCount[b.status] = a.statusCount[b.status] + 1);
            });
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.server-messages", []);
    a.directive("serverMessages", function() {
        return {
            replace: !1,
            restrict: "E",
            templateUrl: "html/directives/serverMessagesDv.html"
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.services.falcon", [ "app.services.x2js" ]);
    a.factory("Falcon", [ "$http", "X2jsService", "$cookieStore", function(a, b) {
        function c(a) {
            var b = -1 !== a.indexOf("?") ? "&" : "?";
            return a = a + b + "user.name=ambari-qa";
        }
        var d = {}, e = 50;
        return d.responses = {
            display: !0,
            queue: [],
            count: {
                pending: 0,
                success: 0,
                error: 0
            },
            multiRequest: {
                cluster: 0,
                feed: 0,
                process: 0
            },
            listLoaded: {
                cluster: !1,
                feed: !1,
                process: !1
            }
        }, d.logRequest = function() {
            d.responses.count.pending = d.responses.count.pending + 1;
        }, d.logResponse = function(a, c, e, f) {
            if ("success" === a) {
                if (!f) {
                    var g = {
                        success: !0,
                        status: c.status,
                        message: c.message,
                        requestId: c.requestId
                    };
                    d.responses.queue.push(g), d.responses.count.success = d.responses.count.success + 1;
                }
                d.responses.count.pending = d.responses.count.pending - 1;
            }
            if ("error" === a) {
                if ("Cannot" !== c.slice(0, 6)) var h = b.xml_str2json(c), g = {
                    success: !1,
                    status: h.result.status,
                    message: h.result.message,
                    requestId: h.result.requestId
                }; else var g = {
                    success: !1,
                    status: "No connection",
                    message: c,
                    requestId: "no ID"
                };
                d.responses.queue.push(g), d.responses.count.error = d.responses.count.error + 1, 
                d.responses.count.pending = d.responses.count.pending - 1;
            }
            e !== !1 && (e = e.toLowerCase(), d.responses.multiRequest[e] = d.responses.multiRequest[e] - 1);
        }, d.removeMessage = function(a) {
            d.responses.queue[a].success ? d.responses.count.success = d.responses.count.success - 1 : d.responses.count.error = d.responses.count.error - 1, 
            d.responses.queue.splice(a, 1);
        }, d.getServerVersion = function() {
            return a.get(c("../api/admin/version"));
        }, d.getServerStack = function() {
            return a.get(c("../api/admin/stack"));
        }, d.postValidateEntity = function(b, d) {
            return a.post(c("../api/entities/validate/" + d), b, {
                headers: {
                    "Content-Type": "text/plain"
                }
            });
        }, d.postSubmitEntity = function(b, d) {
            return a.post(c("../api/entities/submit/" + d), b, {
                headers: {
                    "Content-Type": "text/plain"
                }
            });
        }, d.postUpdateEntity = function(b, d, e) {
            return a.post(c("../api/entities/update/" + d + "/" + e), b, {
                headers: {
                    "Content-Type": "text/plain"
                }
            });
        }, d.postScheduleEntity = function(b, d) {
            return a.post(c("../api/entities/schedule/" + b + "/" + d));
        }, d.postSuspendEntity = function(b, d) {
            return a.post(c("../api/entities/suspend/" + b + "/" + d));
        }, d.postResumeEntity = function(b, d) {
            return a.post(c("../api/entities/resume/" + b + "/" + d));
        }, d.deleteEntity = function(b, d) {
            return a["delete"](c("../api/entities/delete/" + b + "/" + d));
        }, d.getEntities = function(b) {
            return a.get(c("../api/entities/list/" + b + "?fields=status,tags&numResults=" + e));
        }, d.getEntityDefinition = function(b, d) {
            return a.get(c("../api/entities/definition/" + b + "/" + d));
        }, d;
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.services.fileapi", [ "app.services.entity.model" ]);
    a.factory("FileApi", [ "$http", "$q", "EntityModel", function(a, b, c) {
        var d = {};
        return d.supported = window.File && window.FileReader && window.FileList && window.Blob, 
        d.errorMessage = "The File APIs are not fully supported in this browser.", d.fileDetails = "No file loaded", 
        d.fileRaw = "No file loaded", d.loadFile = function(a) {
            if (d.supported) {
                var e = b.defer(), f = new FileReader(), g = a.target.files[0];
                return f.onload = function(a) {
                    return f.readAsText(a, "UTF-8"), function(b) {
                        d.fileRaw = b.target.result, d.fileDetails = a, c.getJson(d.fileRaw), e.resolve();
                    };
                }(g), e.promise;
            }
            alert(d.errorMessage);
        }, d;
    } ]);
}(), function() {
    "use strict";
    function a(a, c, d) {
        return new b(a, c || a, d);
    }
    function b(b, c, d) {
        function e(a, b) {
            for (var c, d = a, e = 0, h = b.length - 1; h > e; e++) c = b[e], f(d, c), d = d[c];
            return new g(d, b[b.length - 1]);
        }
        function f(a, b) {
            a[b] || (a[b] = {});
        }
        function g(a, b) {
            this.target = a, this.child = b, this.get = function() {
                return a[b];
            }, this.set = function(c) {
                a[b] = c;
            };
        }
        function h(b, c) {
            var d = this;
            d.firstTransformation = b, d.secondTransformation = c, d.apply = function(a, b) {
                return d.firstTransformation.apply(a, b), d.secondTransformation.apply(a, b), b;
            }, d.transform = function(b, c, e) {
                return new h(d, a(b, c, e));
            };
        }
        var i = this;
        i.sourceFieldPath = b.split("."), i.targetFieldPath = c.split("."), i.mappingCallback = d, 
        i.transform = function(b, c, d) {
            return new h(i, a(b, c, d));
        }, i.apply = function(a, b) {
            var c = e(a, i.sourceFieldPath), d = c.get();
            if (d = d && i.mappingCallback ? i.mappingCallback(d) : d) {
                var f = e(b, i.targetFieldPath);
                f.set(d);
            }
            return b;
        };
    }
    var c = angular.module("app.services.json.transformer", []);
    c.factory("JsonTransformerFactory", function() {
        return {
            transform: a
        };
    });
}(), function() {
    "use strict";
    function a() {
        return {
            id: b(/^(([a-zA-Z]([\\-a-zA-Z0-9])*){1,39})$/, 39, 0, !0),
            password: b(/^(([a-zA-Z]([\\-a-zA-Z0-9])*){1,39})$/, 39, 0, !0),
            freeText: b(/^([\sa-zA-Z0-9]){1,40}$/),
            alpha: b(/^([a-zA-Z0-9]){1,100}$/),
            commaSeparated: b(/^[a-zA-Z0-9,]{1,80}$/),
            unixId: b(/^([a-z_][a-z0-9-_\.\-]{0,30})$/),
            unixPermissions: b(/^((([0-7]){1,4})|(\*))$/),
            osPath: b(/^[^\0]+$/),
            twoDigits: b(/^([0-9]){1,2}$/),
            tableUri: b(/^[^\0]+$/),
            versionNumbers: b(/^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2}$/)
        };
    }
    function b(a, b, c, d) {
        return {
            pattern: a,
            maxlength: b || 1e3,
            minlength: c || 0,
            required: d || !1
        };
    }
    var c = angular.module("app.services.validation", []);
    c.factory("ValidationService", function() {
        return {
            define: function() {
                return a();
            }
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.services.x2js", []);
    a.factory("X2jsService", function() {
        var a = new X2JS({
            arrayAccessFormPaths: [ "feed.properties.property", "feed.locations.location", "feed.clusters.cluster", "feed.clusters.cluster.locations.location", "cluster.properties.property", "cluster.locations.location", "process.clusters.cluster", "process.inputs.input", "process.outputs.output" ]
        });
        return {
            xml_str2json: function(b) {
                return a.xml_str2json(b);
            },
            json2xml_str: function(b) {
                return a.json2xml_str(b);
            },
            prettifyXml: function(a) {
                var b = "", c = /(>)(<)(\/*)/g;
                a = a.replace(c, "$1\r\n$2$3");
                var d = 0;
                return jQuery.each(a.split("\r\n"), function(a, c) {
                    var e = 0;
                    c.match(/.+<\/\w[^>]*>$/) ? e = 0 : c.match(/^<\/\w/) ? 0 !== d && (d -= 1) : e = c.match(/^<\w[^>]*[^\/]>.*$/) ? 1 : 0;
                    for (var f = "", g = 0; d > g; g++) f += "  ";
                    b += f + c + "\r\n", d += e;
                }), b;
            }
        };
    });
}(), function() {
    "use strict";
    function a() {
        this.name = null, this.description = null, this.groups = null, this.tags = [ new h(null, null) ], 
        this.ACL = new b(), this.schema = new c(), this.frequency = new g(null, "hours"), 
        this.lateArrival = new f(), this.availabilityFlag = null, this.properties = d(), 
        this.customProperties = [ new h(null, null) ], this.storage = new i(), this.clusters = [ new n("source", !0) ], 
        this.timezone = "";
    }
    function b() {
        this.owner = null, this.group = null, this.permission = "*";
    }
    function c() {
        this.location = null, this.provider = null;
    }
    function d() {
        return [ new h("queueName", "default"), new h("jobPriority", "NORMAL"), new h("timeout", new g(1, "hours")), new h("parallel", 3), new h("maxMaps", 8), new h("mapBandwidthKB", 1024) ];
    }
    function e() {
        return [ new h(null, null) ];
    }
    function f() {
        this.active = !1, this.cutOff = new g(null, "hours");
    }
    function g(a, b) {
        this.quantity = a, this.unit = b;
    }
    function h(a, b) {
        this.key = a, this.value = b;
    }
    function i() {
        this.fileSystem = new l(), this.catalog = new j();
    }
    function j() {
        this.active = !1, this.catalogTable = new k();
    }
    function k() {
        this.uri = null, this.focused = !1;
    }
    function l() {
        this.active = !0, this.locations = [ new m("data", "/"), new m("stats", "/"), new m("meta", "/") ];
    }
    function m(a, b) {
        this.type = a, this.path = b, this.focused = !1;
    }
    function n(a, b) {
        this.name = null, this.type = a, this.selected = b, this.retention = new g(null, "hours"), 
        this.retention.action = "delete", this.validity = new o(), this.storage = new i();
    }
    function o() {
        this.start = new p(), this.end = new p(), this.timezone = "";
    }
    function p() {
        this.date = q(), this.time = r(), this.opened = !1;
    }
    function q() {
        var a = new Date();
        return new Date(Date.UTC(a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate()));
    }
    function r() {
        return new Date(Date.UTC(1900, 1, 1, 0, 0, 0));
    }
    function s() {
        this.name = null, this.tags = [ new h(null, null) ], this.workflow = new t(), this.timezone = "", 
        this.frequency = new g(null, "hours"), this.parallel = 1, this.order = null, this.retry = new u(), 
        this.clusters = [ new n("source", !0) ], this.inputs = [], this.outputs = [];
    }
    function t() {
        this.name = null, this.engine = null, this.version = "", this.path = "/";
    }
    function u() {
        this.policy = "periodic", this.attempts = null, this.delay = new g(null, "hours");
    }
    function v() {
        this.name = null, this.feed = null, this.start = null, this.end = null;
    }
    function w() {
        this.name = null, this.feed = null, this.outputInstance = null;
    }
    var x = angular.module("app.services.entity.factory", []);
    x.factory("EntityFactory", [ function() {
        return {
            newFeed: function() {
                return new a();
            },
            newFeedProperties: function() {
                return d();
            },
            newFeedCustomProperties: function() {
                return e();
            },
            newFrequency: function(a, b) {
                return new g(a, b);
            },
            newLocation: function(a, b) {
                return new m(a, b);
            },
            newCluster: function(a, b) {
                return new n(a, b);
            },
            newEntry: function(a, b) {
                return new h(a, b);
            },
            newProcess: function() {
                return new s();
            },
            newInput: function() {
                return new v();
            },
            newOutput: function() {
                return new w();
            },
            newEntity: function(a) {
                return "feed" === a ? this.newFeed() : "process" === a ? this.newProcess() : void 0;
            }
        };
    } ]);
}(), function() {
    "use strict";
    function a() {
        this.messages = {
            error: [],
            info: []
        };
    }
    function b(a, b) {
        this.title = a, this.detail = b;
    }
    var c = angular.module("app.services.messages", []), d = new a();
    c.factory("MessagesService", [ function() {
        return d;
    } ]), a.prototype.validateCategory = function(a) {
        if (!this.messages[a]) throw new Error("Category not registered");
    }, a.prototype.push = function(a, c, d) {
        this.validateCategory(a), this.messages[a].push(new b(c, d));
    }, a.prototype.pop = function(a) {
        return this.validateCategory(a), this.messages[a].pop();
    };
}(), function() {
    "use strict";
    var a = angular.module("app.services.entity.model", []);
    a.factory("EntityModel", [ "X2jsService", function(a) {
        var b = {};
        return b.json = null, b.detailsPageModel = null, b.identifyType = function(a) {
            b.type = a.feed ? "feed" : a.cluster ? "cluster" : a.process ? "process" : "Type not recognized";
        }, b.getJson = function(c) {
            return b.json = a.xml_str2json(c), b.identifyType(b.json);
        }, b.clusterModel = {
            cluster: {
                tags: "",
                interfaces: {
                    "interface": [ {
                        _type: "readonly",
                        _endpoint: "hftp://sandbox.hortonworks.com:50070",
                        _version: "2.2.0"
                    }, {
                        _type: "write",
                        _endpoint: "hdfs://sandbox.hortonworks.com:8020",
                        _version: "2.2.0"
                    }, {
                        _type: "execute",
                        _endpoint: "sandbox.hortonworks.com:8050",
                        _version: "2.2.0"
                    }, {
                        _type: "workflow",
                        _endpoint: "http://sandbox.hortonworks.com:11000/oozie/",
                        _version: "4.0.0"
                    }, {
                        _type: "messaging",
                        _endpoint: "tcp://sandbox.hortonworks.com:61616?daemon=true",
                        _version: "5.1.6"
                    } ]
                },
                locations: {
                    location: [ {
                        _name: "staging",
                        _path: ""
                    }, {
                        _name: "temp",
                        _path: ""
                    }, {
                        _name: "working",
                        _path: ""
                    } ]
                },
                ACL: {
                    _owner: "",
                    _group: "",
                    _permission: ""
                },
                properties: {
                    property: [ {
                        _name: "",
                        _value: ""
                    } ]
                },
                _xmlns: "uri:falcon:cluster:0.1",
                _name: "",
                _description: "",
                _colo: ""
            }
        }, b.feedModel = {
            feed: {
                tags: "",
                groups: "",
                frequency: "",
                timezone: "",
                "late-arrival": {
                    "_cut-off": ""
                },
                clusters: [ {
                    cluster: {
                        validity: {
                            _start: "",
                            _end: ""
                        },
                        retention: {
                            _limit: "",
                            _action: ""
                        },
                        _name: "",
                        _type: "source"
                    }
                } ],
                locations: {
                    location: [ {
                        _type: "data",
                        _path: "/none"
                    }, {
                        _type: "stats",
                        _path: "/none"
                    }, {
                        _type: "meta",
                        _path: "/none"
                    } ]
                },
                ACL: {
                    _owner: "",
                    _group: "",
                    _permission: ""
                },
                schema: {
                    _location: "/none",
                    _provider: "none"
                },
                _xmlns: "uri:falcon:feed:0.1",
                _name: "",
                _description: ""
            }
        }, b;
    } ]);
}(), function() {
    "use strict";
    function a(a) {
        return !d[a._name];
    }
    function b(a) {
        return d[a._name];
    }
    var c = angular.module("app.services.entity.serializer", [ "app.services.json.transformer", "app.services", "app.services.entity.factory" ]);
    c.factory("EntitySerializer", [ "EntityFactory", "JsonTransformerFactory", "X2jsService", function(c, d, e) {
        function f(a) {
            return a.filter(g).map(j).join(",");
        }
        function g(a) {
            return a.key;
        }
        function h(a) {
            return a && a.value;
        }
        function i(a) {
            return a.value.unit ? a.value.quantity : a.value;
        }
        function j(a) {
            return a.key + "=" + a.value;
        }
        function k(a) {
            return a.quantity ? a.unit + "(" + a.quantity + ")" : null;
        }
        function l(a) {
            return String("00" + a).slice(-2);
        }
        function m(a) {
            var b = a.date.getUTCFullYear() + "-" + l(a.date.getUTCMonth()) + "-" + l(a.date.getUTCDate()), c = l(a.time.getUTCHours()) + ":" + l(a.time.getUTCMinutes());
            return b + "T" + c + "Z";
        }
        function n() {
            return {};
        }
        function o(a) {
            this[a] = {
                _xmlns: "uri:falcon:" + a + ":0.1"
            };
        }
        function p(a, b) {
            function c(a) {
                return a.locations.map(function(a) {
                    return g.apply(a, {});
                });
            }
            function d(a) {
                return {
                    _uri: a.catalogTable.uri
                };
            }
            var e = b.transform("key", "_name").transform("value", "_value", function(a) {
                return a.quantity ? k(a) : a;
            }), g = b.transform("type", "_type").transform("path", "_path"), j = b.transform("name", "_name").transform("type", "_type").transform("validity.start", "validity._start", m).transform("validity.end", "validity._end", m).transform("retention", "retention._limit", k).transform("retention.action", "retention._action").transform("storage.fileSystem", "locations.location", function(b) {
                return a.storage.fileSystem.active ? c(b) : null;
            }).transform("storage.catalog", "table", function(b) {
                return a.storage.catalog.active ? d(b) : null;
            }), l = b.transform("name", "feed._name").transform("description", "feed._description").transform("tags", "feed.tags", f).transform("groups", "feed.groups").transform("availabilityFlag", "feed.availabilityFlag").transform("frequency", "feed.frequency", k).transform("timezone", "feed.timezone").transform("lateArrival.cutOff", "feed.late-arrival._cut-off", k).transform("clusters", "feed.clusters.cluster", function(a) {
                return a.map(function(a) {
                    return j.apply(a, {});
                });
            }).transform("storage.fileSystem", "feed.locations.location", function(a) {
                return a.active ? c(a) : null;
            }).transform("storage.catalog", "feed.table", function(a) {
                return a.active ? d(a) : null;
            }).transform("ACL", "feed.ACL", n).transform("ACL.owner", "feed.ACL._owner").transform("ACL.group", "feed.ACL._group").transform("ACL.permission", "feed.ACL._permission").transform("schema", "feed.schema", n).transform("schema.location", "feed.schema._location").transform("schema.provider", "feed.schema._provider").transform("allproperties", "feed.properties.property", function(a) {
                return a.filter(h).filter(i).map(function(a) {
                    return e.apply(a, {});
                });
            });
            return l.apply(a, new o("feed"));
        }
        function q(a, b) {
            var c = b.transform("name", "_name").transform("validity.start", "validity._start", m).transform("validity.end", "validity._end", m), d = b.transform("name", "_name").transform("feed", "_feed").transform("start", "_start").transform("end", "_end"), e = b.transform("name", "_name").transform("feed", "_feed").transform("outputInstance", "_instance"), g = b.transform("name", "process._name").transform("tags", "process.tags", f).transform("clusters", "process.clusters.cluster", function(a) {
                return a.map(function(a) {
                    return c.apply(a, {});
                });
            }).transform("parallel", "process.parallel").transform("order", "process.order").transform("frequency", "process.frequency", k).transform("timezone", "process.timezone").transform("inputs", "process.inputs.input", function(a) {
                return 0 === a.length ? null : a.map(function(a) {
                    return d.apply(a, {});
                });
            }).transform("outputs", "process.outputs.output", function(a) {
                return 0 === a.length ? null : a.map(function(a) {
                    return e.apply(a, {});
                });
            }).transform("workflow.name", "process.workflow._name").transform("workflow.version", "process.workflow._version").transform("workflow.engine", "process.workflow._engine").transform("workflow.path", "process.workflow._path").transform("retry.policy", "process.retry._policy").transform("retry.delay", "process.retry._delay", k).transform("retry.attempts", "process.retry._attempts");
            return g.apply(a, new o("process"));
        }
        function r(d, e) {
            var f = c.newFeed();
            f.storage.fileSystem.active = !1;
            var g = e.transform("_name", "name").transform("_type", "type").transform("validity._start", "validity.start.date", t).transform("validity._start", "validity.start.time", u).transform("validity._end", "validity.end.date", t).transform("validity._end", "validity.end.time", u).transform("retention._limit", "retention", E).transform("retention._action", "retention.action").transform("locations", "storage.fileSystem.active", F).transform("locations.location", "storage.fileSystem.locations", K).transform("table", "storage.catalog.active", F).transform("table._uri", "storage.catalog.catalogTable.uri"), h = e.transform("_name", "name").transform("_description", "description").transform("tags", "tags", D).transform("groups", "groups").transform("ACL._owner", "ACL.owner").transform("ACL._group", "ACL.group").transform("ACL._permission", "ACL.permission").transform("schema._location", "schema.location").transform("schema._provider", "schema.provider").transform("frequency", "frequency", E).transform("late-arrival", "lateArrival.active", F).transform("late-arrival._cut-off", "lateArrival.cutOff", E).transform("availabilityFlag", "availabilityFlag").transform("properties.property", "customProperties", G(a, c.newFeedCustomProperties())).transform("properties.property", "properties", G(b, c.newFeedProperties())).transform("locations", "storage.fileSystem.active", F).transform("locations.location", "storage.fileSystem.locations", K).transform("table", "storage.catalog.active", F).transform("table._uri", "storage.catalog.catalogTable.uri").transform("clusters.cluster", "clusters", v(g)).transform("timezone", "timezone");
            return h.apply(angular.copy(d.feed), f);
        }
        function s(a, b) {
            function d(a) {
                return function(b) {
                    var c = b.map(A(a));
                    return c;
                };
            }
            var e = c.newProcess(), f = b.transform("_name", "name").transform("validity._start", "validity.start.date", t).transform("validity._start", "validity.start.time", u).transform("validity._end", "validity.end.date", t).transform("validity._end", "validity.end.time", u), g = b.transform("_name", "name").transform("_feed", "feed").transform("_start", "start").transform("_end", "end"), h = b.transform("_name", "name").transform("_feed", "feed").transform("_instance", "outputInstance"), i = b.transform("_name", "name").transform("tags", "tags", D).transform("workflow._name", "workflow.name").transform("workflow._version", "workflow.version").transform("workflow._engine", "workflow.engine").transform("workflow._path", "workflow.path").transform("timezone", "timezone").transform("frequency", "frequency", E).transform("parallel", "parallel").transform("order", "order").transform("retry._policy", "retry.policy").transform("retry._attempts", "retry.attempts").transform("retry._delay", "retry.delay", E).transform("clusters.cluster", "clusters", d(f)).transform("inputs.input", "inputs", w(g)).transform("outputs.output", "outputs", y(h));
            return i.apply(angular.copy(a.process), e);
        }
        function t(a) {
            var b = a.split("T")[0].split("-");
            return N(b[0], b[1], b[2]);
        }
        function u(a) {
            var b = a.split("T")[1].split("Z")[0].split(":");
            return O(b[0], b[1]);
        }
        function v(a) {
            return function(b) {
                var c = b.map(A(a));
                return B(c), c;
            };
        }
        function w(a) {
            return function(b) {
                return b.map(x(a));
            };
        }
        function x(a) {
            return function(b) {
                return a.apply(b, c.newInput());
            };
        }
        function y(a) {
            return function(b) {
                return b.map(z(a));
            };
        }
        function z(a) {
            return function(b) {
                return a.apply(b, c.newOutput());
            };
        }
        function A(a) {
            return function(b) {
                var d = c.newCluster("target", !1);
                return d.storage.fileSystem.active = !1, a.apply(b, d);
            };
        }
        function B(a) {
            for (var b = 0, c = a.length; c > b; b++) if ("source" === a[b].type) return void (a[b].selected = !0);
        }
        function C(a) {
            var b = a.split("=");
            return c.newEntry(b[0], b[1]);
        }
        function D(a) {
            return a.split(",").map(C);
        }
        function E(a) {
            var b = a.split("(");
            return c.newFrequency(b[1].split(")")[0], b[0]);
        }
        function F(a) {
            return !!a;
        }
        function G(a, b) {
            return function(c) {
                var d = I(c, a).map(J);
                return H(b, d);
            };
        }
        function H(a, b) {
            var c = angular.copy(a), d = M(c, "key");
            return b.forEach(function(a) {
                d[a.key] ? d[a.key].value = a.value : c.push(a);
            }), c;
        }
        function I(a, b) {
            for (var c = [], d = 0, e = a.length; e > d; d++) b(a[d]) && c.push(a[d]);
            return c;
        }
        function J(a) {
            var b = "timeout" !== a._name ? a._value : E(a._value);
            return c.newEntry(a._name, b);
        }
        function K(a) {
            return a.map(L);
        }
        function L(a) {
            return c.newLocation(a._type, a._path);
        }
        function M(a, b) {
            var c = {};
            return a.forEach(function(a) {
                c[a[b]] = a;
            }), c;
        }
        function N(a, b, c) {
            return new Date(Date.UTC(a, b, c));
        }
        function O(a, b) {
            return new Date(Date.UTC(1900, 1, 1, a, b, 0));
        }
        return {
            preSerialize: function(a, b) {
                return "feed" === b ? (a.properties && (a.allproperties = a.properties.concat(a.customProperties)), 
                p(a, d)) : "process" === b ? q(a, d) : void 0;
            },
            serialize: function(a, b) {
                return e.json2xml_str(this.preSerialize(a, b));
            },
            preDeserialize: function(a, b) {
                return "feed" === b ? r(a, d) : "process" === b ? s(a, d) : void 0;
            },
            deserialize: function(a, b) {
                var c = e.xml_str2json(a);
                return this.preDeserialize(c, b);
            }
        };
    } ]);
    var d = {
        queueName: !0,
        jobPriority: !0,
        timeout: !0,
        parallel: !0,
        maxMaps: !0,
        mapBandwidthKB: !0
    };
}(), function() {
    "use strict";
    angular.module("app.services", [ "app.services.falcon", "app.services.fileapi", "app.services.json.transformer", "app.services.x2js", "app.services.validation", "app.services.entity.serializer", "app.services.entity.factory", "app.services.entity.model" ]);
}(), function() {
    "use strict";
    var a = angular.module("app", [ "ui.bootstrap", "ui.router", "ngCookies", "ngAnimate", "ngMessages", "checklist-model", "app.controllers", "app.directives", "app.services" ]);
    a.config([ "$stateProvider", "$urlRouterProvider", function(a, b) {
        b.otherwise("/"), a.state("main", {
            url: "/",
            templateUrl: "html/mainTpl.html",
            controller: "DashboardCtrl"
        }).state("login", {
            controller: "LoginFormCtrl",
            templateUrl: "html/login.html"
        }).state("entityDetails", {
            templateUrl: "html/entityDetailsTpl.html",
            controller: "EntityDetailsCtrl"
        }).state("forms", {
            templateUrl: "html/formsTpl.html"
        }).state("forms.cluster", {
            controller: "ClusterFormCtrl",
            templateUrl: "html/cluster/clusterFormTpl.html"
        }).state("forms.cluster.general", {
            templateUrl: "html/cluster/clusterFormGeneralStepTpl.html"
        }).state("forms.cluster.summary", {
            templateUrl: "html/cluster/clusterFormSummaryStepTpl.html"
        }).state("forms.feed", {
            templateUrl: "html/feed/feedFormTpl.html",
            controller: "FeedController"
        }).state("forms.feed.general", {
            templateUrl: "html/feed/feedFormGeneralStepTpl.html",
            controller: "FeedGeneralInformationController"
        }).state("forms.feed.properties", {
            templateUrl: "html/feed/feedFormPropertiesStepTpl.html",
            controller: "FeedPropertiesController"
        }).state("forms.feed.location", {
            templateUrl: "html/feed/feedFormLocationStepTpl.html",
            controller: "FeedLocationController"
        }).state("forms.feed.clusters", {
            templateUrl: "html/feed/feedFormClustersStepTpl.html",
            controller: "FeedClustersController",
            resolve: {
                clustersList: [ "Falcon", function(a) {
                    return a.getEntities("cluster").then(function(a) {
                        return a.data;
                    });
                } ]
            }
        }).state("forms.feed.summary", {
            templateUrl: "html/feed/feedFormSummaryStepTpl.html",
            controller: "FeedSummaryController"
        }).state("forms.process", {
            templateUrl: "html/process/processFormTpl.html",
            controller: "ProcessRootCtrl"
        }).state("forms.process.general", {
            templateUrl: "html/process/processFormGeneralStepTpl.html",
            controller: "ProcessGeneralInformationCtrl"
        }).state("forms.process.properties", {
            templateUrl: "html/process/processFormPropertiesStepTpl.html",
            controller: "ProcessPropertiesCtrl"
        }).state("forms.process.clusters", {
            templateUrl: "html/process/processFormClustersStepTpl.html",
            controller: "ProcessClustersCtrl",
            resolve: {
                clustersList: [ "Falcon", function(a) {
                    return a.getEntities("cluster").then(function(a) {
                        return a.data;
                    });
                } ]
            }
        }).state("forms.process.io", {
            templateUrl: "html/process/processFormInputsAndOutputsStepTpl.html",
            controller: "ProcessInputsAndOutputsCtrl",
            resolve: {
                feedsList: [ "Falcon", function(a) {
                    return a.getEntities("feed").then(function(a) {
                        return a.data;
                    });
                } ]
            }
        }).state("forms.process.summary", {
            templateUrl: "html/process/processFormSummaryStepTpl.html",
            controller: "ProcessSummaryCtrl"
        });
    } ]), a.run([ "$rootScope", function(a) {
        a.userLogged = function() {
            return !0;
        }, a.$on("$stateChangeError", function(a, b, c, d, e, f) {
            console.log("Manual log of stateChangeError: " + f);
        });
    } ]);
}();
//# sourceMappingURL=main.min.map